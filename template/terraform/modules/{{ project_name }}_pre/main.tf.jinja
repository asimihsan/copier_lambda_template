terraform {
  backend "s3" {}
}

provider "aws" {
  region = "us-west-2"
}

resource "aws_dynamodb_table" "deployment_rotation" {
  name         = "${var.project_prefix}-deployment-rotation"
  billing_mode = "PAY_PER_REQUEST"
  hash_key     = "rotation_id"

  attribute {
    name = "rotation_id"
    type = "S"
  }
}

resource "aws_dynamodb_table" "override_requests" {
  name         = "${var.project_prefix}-override-requests"
  billing_mode = "PAY_PER_REQUEST"
  hash_key     = "override_id"

  attribute {
    name = "override_id"
    type = "S"
  }
}

resource "aws_iam_role" "lambda_exec_role" {
  name               = "${var.project_prefix}-lambda-role"
  assume_role_policy = jsonencode({
    Version   = "2012-10-17",
    Statement = [{
      Action    = "sts:AssumeRole",
      Effect    = "Allow",
      Principal = { Service = "lambda.amazonaws.com" }
    }]
  })
}

resource "aws_iam_policy_attachment" "lambda_policy_attach" {
  name       = "${var.project_prefix}-lambda-policy"
  roles      = [aws_iam_role.lambda_exec_role.name]
  policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
}

resource "aws_iam_policy" "lambda_dynamodb_policy" {
  name        = "${var.project_prefix}-lambda-dynamodb-policy"
  description = "IAM policy to allow Lambda functions to access DynamoDB tables"
  policy      = jsonencode({
    Version   = "2012-10-17",
    Statement = [
      {
        Effect = "Allow",
        Action = [
          "dynamodb:GetItem",
          "dynamodb:PutItem",
          "dynamodb:UpdateItem",
          "dynamodb:DeleteItem",
          "dynamodb:Query",
          "dynamodb:Scan",
        ],
        Resource = [
          aws_dynamodb_table.deployment_rotation.arn,
          aws_dynamodb_table.override_requests.arn,
        ]
      }
    ]
  })
}

resource "aws_iam_policy_attachment" "lambda_dynamodb_policy_attach" {
  name       = "${var.project_prefix}-lambda-dynamodb-policy-attach"
  roles      = [aws_iam_role.lambda_exec_role.name]
  policy_arn = aws_iam_policy.lambda_dynamodb_policy.arn
}
