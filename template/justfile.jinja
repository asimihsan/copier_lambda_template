# justfile for {{ project_name }}

setup:
    echo "Setting up dev environment for {{ project_name }}..."
    mise trust
    mise use -g 'python@prefix:3.12'
    mise x python -- pip install --user pipx
    mise install
    mise x go -- go mod tidy

generate:
    mkdir -p internal/handler
    mise x oapi-codegen -- \
        oapi-codegen \
            -package handler \
            -generate types,server,spec \
            -o internal/handler/api.gen.go \
            api/openapi.yaml
    mise x go -- go mod tidy

lint:
    echo "Linting {{ project_name }}..."
    mise x go -- golangci-lint run --fix ./...

test:
    mise x go -- go test ./... -v

rotation-test:
    echo "Testing rotation functions..."
    # Add commands to run rotation repository/handler tests

override-test:
    echo "Testing override functions..."
    # Add commands to run override repository/handler tests

build:
    mise x go -- go build -o bin/server cmd/server/main.go

run:
    mise x go -- go run cmd/server/main.go

docker-build:
    docker build --target final -t {{ project_name }}:latest .

docker-image-hash:
    ./scripts/compute_deploy_hash.sh {{ project_name }}

push:
    # Suppose we push to some ECR. The actual repository URI might be from Terraform outputs.
    echo "Pushing {{ project_name }} to ECR..."

terraform-init:
    #!/usr/bin/env bash
    set -euo pipefail
    export TF_STATE_ENCRYPTION_PASSPHRASE=$(op read "{{ tofu_password_1password_ref}}")
    export SOPS_AGE_KEY_FILE=~/.config/sops/age/key.txt
    cd terraform && mise x -- terragrunt run-all init --tf-path tofu --tf-forward-stdout

terraform-dev-plan:
    #!/usr/bin/env bash
    set -euo pipefail
    export TF_STATE_ENCRYPTION_PASSPHRASE=$(op read "{{ tofu_password_1password_ref}}")
    export SOPS_AGE_KEY_FILE=~/.config/sops/age/key.txt
    cd terraform/dev && mise x -- terragrunt run-all plan --tf-path tofu --tf-forward-stdout --queue-include-external

terraform-dev-apply:
    #!/usr/bin/env bash
    set -euo pipefail
    export TF_STATE_ENCRYPTION_PASSPHRASE=$(op read "{{ tofu_password_1password_ref}}")
    export SOPS_AGE_KEY_FILE=~/.config/sops/age/key.txt
    cd terraform/dev && mise x -- terragrunt run-all apply --tf-path tofu --tf-forward-stdout --queue-include-external

sam-deploy:
    #!/usr/bin/env bash
    export TF_STATE_ENCRYPTION_PASSPHRASE=$(op read "{{ tofu_password_1password_ref}}")
    export SOPS_AGE_KEY_FILE=~/.config/sops/age/key.txt

    echo "Retrieving ECR repository URL..."
    REPO_URI=$(cd terraform/infrastructure && mise x -- terragrunt output --tf-path tofu -json | jq -r '.repository_url.value')
    echo "ECR repository URL: $REPO_URI"

    # Get all outputs from lambda template directory at once
    echo "Retrieving lambda template outputs..."
    LAMBDA_OUTPUTS=$(cd terraform/dev/generated_lambda_template_pre && mise x -- terragrunt output --tf-path tofu -json)

    # Extract individual values using jq with .value
    LAMBDA_EXEC_ROLE=$(echo "$LAMBDA_OUTPUTS" | jq -r '.lambda_exec_role.value')
    echo "Lambda role ARN: $LAMBDA_EXEC_ROLE"

    PROJECT_PREFIX=$(echo "$LAMBDA_OUTPUTS" | jq -r '.project_prefix.value')
    echo "Project prefix: $PROJECT_PREFIX"

    SECRETS_ARN=$(echo "$LAMBDA_OUTPUTS" | jq -r '.lambda_secrets_arn.value')
    echo "Secrets ARN: $SECRETS_ARN"

    OVERRIDE_TABLE_NAME=$(echo "$LAMBDA_OUTPUTS" | jq -r '.override_table_name.value')
    echo "Override table name: $OVERRIDE_TABLE_NAME"

    ROTATION_TABLE_NAME=$(echo "$LAMBDA_OUTPUTS" | jq -r '.rotation_table_name.value')
    echo "Rotation table name: $ROTATION_TABLE_NAME"

    ROTATION_SCHEDULE_TABLE_NAME=$(echo "$LAMBDA_OUTPUTS" | jq -r '.rotation_schedule_table_name.value')
    echo "Rotation schedule table name: $ROTATION_SCHEDULE_TABLE_NAME"
    
    # Build and deploy with SAM (no guided mode)
    mise x aws-sam -- sam build --use-container --template-file sam/template.yaml
    mise x aws-sam -- sam deploy \
        --stack-name "$PROJECT_PREFIX" \
        --capabilities CAPABILITY_IAM \
        --no-confirm-changeset \
        --no-fail-on-empty-changeset \
        --template-file .aws-sam/build/template.yaml \
        --region us-west-2 \
        --image-repository $REPO_URI \
        --parameter-overrides \
            AwsRegion=us-west-2 \
            LambdaRole=$LAMBDA_EXEC_ROLE \
            ProjectPrefix=$PROJECT_PREFIX \
            SecretsArn=$SECRETS_ARN \
            OverrideTableName=$OVERRIDE_TABLE_NAME \
            RotationTableName=$ROTATION_TABLE_NAME \
            RotationScheduleTableName=$ROTATION_SCHEDULE_TABLE_NAME

create-sops-age-key:
    mkdir -p ~/.config/sops/age
    mise x -- age-keygen -o ~/.config/sops/age/key.txt

edit-sops-secrets:
    #!/usr/bin/env bash
    export SOPS_AGE_KEY_FILE=~/.config/sops/age/key.txt
    mise x -- sops secrets/lambda-secrets.yaml
