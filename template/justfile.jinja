# justfile for {{ project_name }}

setup:
    echo "Setting up dev environment for {{ project_name }}..."
    mise trust
    mise use -g 'python@prefix:3.12'
    mise x python -- pip install --user pipx
    mise install
    mise x go -- go mod tidy

generate:
    mkdir -p internal/handler
    mise x oapi-codegen -- \
        oapi-codegen \
            -package handler \
            -generate types,server,spec \
            -o internal/handler/api.gen.go \
            api/openapi.yaml
    mise x go -- go mod tidy

lint:
    echo "Linting {{ project_name }}..."
    mise x go -- golangci-lint run --fix ./...

test:
    mise x go -- go test ./... -v

rotation-test:
    echo "Testing rotation functions..."
    # Add commands to run rotation repository/handler tests

override-test:
    echo "Testing override functions..."
    # Add commands to run override repository/handler tests

build:
    mise x go -- go build -o bin/server cmd/server/main.go

run:
    mise x go -- go run cmd/server/main.go

docker-build:
    docker build --target final -t {{ project_name }}:latest .

push:
    # Suppose we push to some ECR. The actual repository URI might be from Terraform outputs.
    echo "Pushing {{ project_name }} to ECR..."

terraform-init:
    cd terraform && terragrunt run-all init --tf-forward-stdout

terraform-dev-plan:
    cd terraform/dev && terragrunt run-all plan --tf-forward-stdout

terraform-dev-apply:
    cd terraform/dev && terragrunt run-all apply --tf-forward-stdout

sam-deploy:
    @echo "Deploying Lambda via SAM CLI..."
    # Ensure your built binary and SAM template are up-to-date.
    sam deploy --template-file sam/template.yaml --stack-name {{ project_name_hyphens }}-lambda --capabilities CAPABILITY_IAM

tf-get-ecr:
    @echo "Retrieving ECR repository URL..."
    terraform -chdir=terraform/infrastructure output -raw repository_url

lambda-url:
    @echo "Retrieving Lambda Function URL..."
    terraform -chdir=terraform/modules/lambda_function_url output -raw lambda_function_url
