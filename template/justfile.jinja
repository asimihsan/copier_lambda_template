# justfile for {{ project_name }}

setup:
    echo "Setting up dev environment for {{ project_name }}..."
    mise trust
    mise use -g 'python@prefix:3.12'
    mise x python -- pip install --user pipx
    mise install
    mise x go -- go mod tidy

generate:
    mkdir -p internal/handler
    mise x oapi-codegen -- \
        oapi-codegen \
            -package handler \
            -generate types,server,spec \
            -o internal/handler/api.gen.go \
            api/openapi.yaml
    mise x go -- go mod tidy

lint:
    echo "Linting {{ project_name }}..."
    mise x go -- golangci-lint run --fix ./...

test:
    mise x go -- go test ./... -v

rotation-test:
    echo "Testing rotation functions..."
    # Add commands to run rotation repository/handler tests

override-test:
    echo "Testing override functions..."
    # Add commands to run override repository/handler tests

build:
    mise x go -- go build -o bin/server cmd/server/main.go

run:
    mise x go -- go run cmd/server/main.go

docker-build:
    docker build --target final -t {{ project_name }}:latest .

docker-image-hash:
    ./scripts/compute_deploy_hash.sh {{ project_name }}

push:
    # Suppose we push to some ECR. The actual repository URI might be from Terraform outputs.
    echo "Pushing {{ project_name }} to ECR..."

terraform-init:
    cd terraform && terragrunt run-all init --tf-forward-stdout

terraform-dev-plan:
    cd terraform/dev && terragrunt run-all plan --tf-forward-stdout --queue-include-external

terraform-dev-apply:
    cd terraform/dev && terragrunt run-all apply --tf-forward-stdout --queue-include-external

sam-deploy:
    #!/usr/bin/env bash
    echo "Retrieving ECR repository URL..."
    REPO_URI=$(cd terraform/infrastructure && terragrunt output -json repository_url | jq -r '.')
    echo "ECR repository URL: $REPO_URI"
    echo "Retrieving Lambda role ARN..."
    LAMBDA_EXEC_ROLE=$(cd terraform/dev/{{ project_name }}_pre && terragrunt output -json lambda_exec_role | jq -r '.')
    echo "Lambda role ARN: $LAMBDA_EXEC_ROLE"
    
    # Retrieving project prefix
    PROJECT_PREFIX=$(cd terraform/dev/{{ project_name }}_pre && terragrunt output -json project_prefix | jq -r '.')
    echo "Project prefix: $PROJECT_PREFIX"
    
    # Build and tag Docker image
    docker build --target final -t generated_lambda_template:latest .
    docker tag generated_lambda_template:latest $REPO_URI:latest
    
    # Login to ECR and push the image
    aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin $REPO_URI
    docker push $REPO_URI:latest
    
    # Build and deploy with SAM (no guided mode)
    mise x aws-sam -- sam build --use-container --template-file sam/template.yaml
    mise x aws-sam -- sam deploy \
        --stack-name "$PROJECT_PREFIX" \
        --capabilities CAPABILITY_IAM \
        --no-confirm-changeset \
        --no-fail-on-empty-changeset \
        --template-file .aws-sam/build/template.yaml \
        --parameter-overrides "EcrRepoUrl=$REPO_URI LambdaRole=$LAMBDA_EXEC_ROLE ProjectPrefix=$PROJECT_PREFIX" \
        --region us-west-2 \
        --image-repository $REPO_URI
