package handler

import (
	"context"
	"fmt"
	"net/http"
	"strings"
	"time"

	"github.com/labstack/echo/v4"
	"github.com/rs/zerolog/log"

	"github.com/slack-go/slack"
	"github.com/aws/aws-sdk-go-v2/service/dynamodb/types"

	"{{ github_path }}/internal/notifier"
	"{{ github_path }}/internal/repository"
	"{{ github_path }}/internal/tick"
)

// SlackNotifier defines an interface for sending notifications to Slack
type SlackNotifier interface {
	NotifyChannel(channelID, message string) error
}

// SlackClient implements SlackNotifier using the slack-go client
type SlackClient struct {
	client *slack.Client
}

// NewSlackClient creates a new Slack client wrapper
func NewSlackClient(token string) *SlackClient {
	return &SlackClient{
		client: slack.New(token),
	}
}

// NotifyChannel sends a message to a Slack channel
func (s *SlackClient) NotifyChannel(channelID, message string) error {
	_, _, err := s.client.PostMessage(
		channelID,
		slack.MsgOptionText(message, false),
	)
	return err
}

// TickHandler processes scheduled tick events.
type TickHandler struct {
	ScheduleRepo repository.RotationScheduleRepository
	RotationRepo repository.RotationRepository
	SlackNotifier SlackNotifier
	RotationNotifier *notifier.RotationNotifier
}

// NewTickHandler creates a new tick handler
func NewTickHandler(
	scheduleRepo repository.RotationScheduleRepository,
	rotationRepo repository.RotationRepository,
	slackNotifier SlackNotifier,
) *TickHandler {
	return &TickHandler{
		ScheduleRepo: scheduleRepo,
		RotationRepo: rotationRepo,
		SlackNotifier: slackNotifier,
	}
}

// ProcessTick processes scheduled tick events.
// This implements the tick.Processor interface.
// teamID: if non-empty, perform a nuclear update for that team.
func (h *TickHandler) ProcessTick(ctx context.Context, teamID string) error {
	now := time.Now().UTC()

	// --- NUCLEAR OPTION: Force update rotations if teamID is provided ---
	if teamID != "" {
		var lastEvaluatedKey map[string]types.AttributeValue
		for {
			rotations, lek, err := h.RotationRepo.ListRotations(ctx, teamID, 100, lastEvaluatedKey)
			if err != nil {
				log.Error().Err(err).Msg("Failed to list rotations for nuclear update")
				break
			}

			for _, rotation := range rotations {
				// If the rotation is overdue, force advance it
				if now.After(rotation.NextRotationDate) {
					log.Info().Str("rotation", rotation.RotationLabel).Msg("Forcing rotation advancement (nuclear option)")
					if err := h.RotationRepo.AdvanceRotation(ctx, teamID, rotation.RotationLabel); err != nil {
						log.Error().Err(err).Str("rotation", rotation.RotationLabel).Msg("Failed to force advance rotation")
					} else {
						// Optionally, re-fetch the updated rotation to get the new owner and Slack channel
						updatedRotation, errGet := h.RotationRepo.GetRotation(ctx, teamID, rotation.RotationLabel)
						if errGet == nil && updatedRotation != nil && updatedRotation.SlackChannelID != "" {
							forcedMsg := fmt.Sprintf("Forced advancement: rotation `%s` new owner is <@%s>.", updatedRotation.RotationLabel, updatedRotation.CurrentOwner)
							if errNotify := h.SlackNotifier.NotifyChannel(updatedRotation.SlackChannelID, forcedMsg); errNotify != nil {
								log.Error().Err(errNotify).Str("rotation", updatedRotation.RotationLabel).Msg("Failed to notify forced advancement")
							}
						}
					}
				}
			}

			if lek == nil {
				break
			}
			lastEvaluatedKey = lek
		}
	} else {
		log.Info().Msg("Skipping nuclear option; no teamID provided")
	}
	// --- End Nuclear Option ---

	hourKey := now.Format("2006-01-02T15")

	log.Info().Str("hourKey", hourKey).Msg("Processing tick events")

	events, err := h.ScheduleRepo.GetEventsByHour(ctx, hourKey)
	if err != nil {
		log.Error().Err(err).Msg("Failed to get scheduled events")
		return fmt.Errorf("failed to get scheduled events: %w", err)
	}

	log.Info().Int("eventCount", len(events)).Msg("Found scheduled events")

	for _, event := range events {
		// Only process events due within this minute
		if event.EventTime.After(now) || event.EventTime.Before(now.Add(-time.Minute)) {
			log.Debug().
				Time("eventTime", event.EventTime).
				Time("now", now).
				Msg("Skipping event not due in this minute")
			continue
		}

		log.Info().
			Str("rotationID", event.RotationID).
			Str("action", event.Action).
			Str("nextOwner", event.NextOwner).
			Msg("Processing event")

		var msg string
		switch event.Action {
		case "reminder":
			msg = fmt.Sprintf("Reminder: rotation handover to <@%s> in 24 hours.", event.NextOwner)
		case "handover":
			teamID, rotationLabel := extractRotationComponents(event.RotationID)
			if err := h.RotationRepo.AdvanceRotation(ctx, teamID, rotationLabel); err != nil {
				log.Error().
					Err(err).
					Str("teamID", teamID).
					Str("rotationLabel", rotationLabel).
					Msg("Failed to advance rotation")
				continue
			}
			
			// Get the updated rotation and use the notifier for a richer message
			updatedRotation, err := h.RotationRepo.GetRotation(ctx, teamID, rotationLabel)
			if err == nil && updatedRotation != nil && h.RotationNotifier != nil {
				// Announce with DMs on handover
				_, err := h.RotationNotifier.AnnounceRotation(updatedRotation, true)
				if err != nil {
					log.Error().
						Err(err).
						Str("rotationID", event.RotationID).
						Msg("Failed to announce rotation")
				}
				// Skip the old channel notification since we've sent the enhanced one
				continue
			}
			
			// Fallback to old simple message if we couldn't get rotation info
			msg = fmt.Sprintf("Rotation handover now to <@%s>.", event.NextOwner)
		default:
			log.Warn().Str("action", event.Action).Msg("Unknown action type")
			continue
		}

		// Determine the Slack channel to notify.
		// Prefer the channel set on the rotation if available.
		teamID, rotationLabel := extractRotationComponents(event.RotationID)
		rotation, err := h.RotationRepo.GetRotation(ctx, teamID, rotationLabel)
		var channelID string
		if err == nil && rotation != nil && rotation.SlackChannelID != "" {
			channelID = rotation.SlackChannelID
		} else {
			// Fall back to the channel from the event.
			channelID = event.SlackChannelID
		}
		if channelID == "" {
			log.Info().Str("rotationID", event.RotationID).Msg("No Slack channel configured; skipping notification")
			continue
		}

		if err := h.SlackNotifier.NotifyChannel(channelID, msg); err != nil {
			log.Error().
				Err(err).
				Str("channelID", channelID).
				Msg("Failed to send Slack notification")
		} else {
			log.Info().
				Str("channelID", channelID).
				Msg("Sent Slack notification")
		}
	}
	return nil
}

// PostTick is the HTTP handler for processing tick events.
func (h *TickHandler) PostTick(c echo.Context) error {
	ctx := c.Request().Context()
	if err := h.ProcessTick(ctx, ""); err != nil {
		return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
	}
	return c.NoContent(http.StatusOK)
}

// extractRotationComponents extracts teamID and rotationLabel from a combined rotation ID
// Expected format: "teamID#rotationLabel"
func extractRotationComponents(rotationID string) (teamID, rotationLabel string) {
	parts := strings.SplitN(rotationID, "#", 2)
	if len(parts) != 2 {
		log.Error().Str("rotationID", rotationID).Msg("Invalid rotation ID format")
		return "", ""
	}
	return parts[0], parts[1]
}

// Ensure TickHandler implements tick.Processor
var _ tick.Processor = (*TickHandler)(nil)
