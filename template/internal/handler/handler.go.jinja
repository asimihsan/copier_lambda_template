package handler

import (
	"net/http"

	"{{ github_path }}/internal/repository"

	"github.com/labstack/echo/v4"
	"github.com/rs/zerolog/log"
)

// ServerImpl implements the ServerInterface generated by oapi-codegen
type ServerImpl struct {
	repo repository.UserRepository
}

// NewServer creates a new server implementation
func NewServer(repo repository.UserRepository) *ServerImpl {
	return &ServerImpl{
		repo: repo,
	}
}

// ListUsers returns all users
func (s *ServerImpl) ListUsers(ctx echo.Context) error {
	users, err := s.repo.ListUsers(ctx.Request().Context())
	if err != nil {
		log.Error().Err(err).Msg("Failed to list users")
		return echo.NewHTTPError(http.StatusInternalServerError, "Failed to list users")
	}

	return ctx.JSON(http.StatusOK, users)
}

// GetUser returns a user by ID
func (s *ServerImpl) GetUser(ctx echo.Context, id string) error {
	user, err := s.repo.GetUser(ctx.Request().Context(), id)
	if err != nil {
		log.Error().Err(err).Str("id", id).Msg("Failed to get user")
		return echo.NewHTTPError(http.StatusInternalServerError, "Failed to get user")
	}

	if user == nil {
		return echo.NewHTTPError(http.StatusNotFound, "User not found")
	}

	return ctx.JSON(http.StatusOK, user)
}

// CreateUser creates a new user
func (s *ServerImpl) CreateUser(ctx echo.Context) error {
	var userCreate UserCreate
	if err := ctx.Bind(&userCreate); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, "Invalid request")
	}

	user, err := s.repo.CreateUser(ctx.Request().Context(), repository.UserCreate{
		Email: string(userCreate.Email),
		Name:  userCreate.Name,
	})
	if err != nil {
		log.Error().Err(err).Msg("Failed to create user")
		return echo.NewHTTPError(http.StatusInternalServerError, "Failed to create user")
	}

	return ctx.JSON(http.StatusCreated, user)
}

// UpdateUser updates an existing user
func (s *ServerImpl) UpdateUser(ctx echo.Context, id string) error {
	var userUpdate UserUpdate
	if err := ctx.Bind(&userUpdate); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, "Invalid request")
	}

	// Convert to repository model
	repoUpdate := repository.UserUpdate{}
	if userUpdate.Email != nil {
		email := string(*userUpdate.Email)
		repoUpdate.Email = &email
	}
	if userUpdate.Name != nil {
		name := *userUpdate.Name
		repoUpdate.Name = &name
	}

	user, err := s.repo.UpdateUser(ctx.Request().Context(), id, repoUpdate)
	if err != nil {
		log.Error().Err(err).Str("id", id).Msg("Failed to update user")
		return echo.NewHTTPError(http.StatusInternalServerError, "Failed to update user")
	}

	if user == nil {
		return echo.NewHTTPError(http.StatusNotFound, "User not found")
	}

	return ctx.JSON(http.StatusOK, user)
}

// DeleteUser deletes a user
func (s *ServerImpl) DeleteUser(ctx echo.Context, id string) error {
	// First check if the user exists
	user, err := s.repo.GetUser(ctx.Request().Context(), id)
	if err != nil {
		log.Error().Err(err).Str("id", id).Msg("Failed to get user")
		return echo.NewHTTPError(http.StatusInternalServerError, "Failed to get user")
	}

	if user == nil {
		return echo.NewHTTPError(http.StatusNotFound, "User not found")
	}

	if err := s.repo.DeleteUser(ctx.Request().Context(), id); err != nil {
		log.Error().Err(err).Str("id", id).Msg("Failed to delete user")
		return echo.NewHTTPError(http.StatusInternalServerError, "Failed to delete user")
	}

	return ctx.NoContent(http.StatusNoContent)
}
