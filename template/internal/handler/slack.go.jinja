package handler

import (
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/rs/zerolog"

	"github.com/slack-go/slack"

	"{{ github_path }}/internal/config"
	"{{ github_path }}/internal/repository"
	slackcmd "{{ github_path }}/internal/slack"
)

type SlackHandler struct {
	rotationRepo repository.RotationRepository
	overrideRepo repository.OverrideRepository
	slackConfig  config.SlackConfig
	registry     *slackcmd.Registry
	logger       zerolog.Logger
}

func NewSlackHandler(
	overrideRepo repository.OverrideRepository,
	rotationRepo repository.RotationRepository,
	slackConfig config.SlackConfig,
	logger zerolog.Logger,
) *SlackHandler {
	registry := slackcmd.NewRegistry(logger)

	slackClient := slack.New(slackConfig.BotToken)
	registry.Register("rotation", slackcmd.NewRotationCommand(rotationRepo, slackClient))
	registry.Register("override", slackcmd.NewOverrideCommand(overrideRepo))

	return &SlackHandler{
		rotationRepo: rotationRepo,
		overrideRepo: overrideRepo,
		slackConfig:  slackConfig,
		registry:     registry,
		logger:       logger,
	}
}

func (h *SlackHandler) PostSlack(ctx echo.Context) error {
	h.logger.Info().Msg("Received Slack command")

	// Work with already parsed form
	formValues := ctx.Request().Form

	if formValues == nil {
		h.logger.Error().Msg("Form values are nil")
		return echo.NewHTTPError(http.StatusInternalServerError, "form values are nil")
	}

	if formValues.Get("ssl_check") == "1" {
		h.logger.Info().Msg("Received SSL check from Slack")
		return ctx.NoContent(http.StatusOK)
	}

	// Build a slack.SlashCommand from the payload.
	slashCmd := slack.SlashCommand{
		APIAppID:    formValues.Get("api_app_id"),
		ChannelName: formValues.Get("channel_name"),
		ChannelID:   formValues.Get("channel_id"),
		Command:     formValues.Get("command"),
		ResponseURL: formValues.Get("response_url"),
		TeamID:      formValues.Get("team_id"),
		Text:        formValues.Get("text"),
		TriggerID:   formValues.Get("trigger_id"),
		UserID:      formValues.Get("user_id"),
		UserName:    formValues.Get("user_name"),
	}

	h.logger.Info().
		Str("command", slashCmd.Command).
		Str("text", slashCmd.Text).
		Msg("Slack command received")

	msg, err := h.registry.Dispatch(ctx.Request().Context(), slashCmd)

	if err != nil {
		h.logger.Error().Err(err).Msg("Failed to dispatch command")
		return echo.NewHTTPError(http.StatusInternalServerError, fmt.Sprintf("command dispatch error: %v", err))
	}

	return ctx.JSON(http.StatusOK, msg)
}
