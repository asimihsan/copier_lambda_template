package notifier

import (
	"fmt"
	"time"

	"github.com/hashicorp/go-multierror"
	"github.com/slack-go/slack"
	"{{ github_path }}/internal/repository"
	"{{ github_path }}/internal/rotationutil"
)

// RotationNotifier handles sending notifications about rotations
type RotationNotifier struct {
	slackClient *slack.Client
}

// NewRotationNotifier creates a new rotation notifier
func NewRotationNotifier(slackClient *slack.Client) *RotationNotifier {
	return &RotationNotifier{
		slackClient: slackClient,
	}
}

// AnnounceRotation broadcasts rotation info to a channel and/or direct messages
// Returns the generated message text and any error
func (n *RotationNotifier) AnnounceRotation(rotation *repository.Rotation, dmParticipants bool) (string, error) {
	// Find the next owner
	nextOwnerIndex := 0
	for i, ownerID := range rotation.RotationOrder {
		if ownerID == rotation.CurrentOwner {
			nextOwnerIndex = (i + 1) % len(rotation.RotationOrder)
			break
		}
	}
	nextOwner := rotation.RotationOrder[nextOwnerIndex]
	
	// Calculate next owner's dates
	nextOwnerFrom := rotation.NextRotationDate
	nextOwnerTo := rotationutil.CalculateNextRotationDate(nextOwnerFrom, rotation.Frequency)
	
	// Check if rotation is in the future
	now := time.Now()
	isFutureRotation := rotation.LastRotationDate.After(now)
	
	// Format the announcement message based on whether it's a future rotation
	var msg string
	if isFutureRotation {
		// Format the announcement message for future rotation
		msg = fmt.Sprintf("üîÑ *Rotation Update: `%s`*\n\n", rotation.RotationLabel)
		msg += fmt.Sprintf("‚Ä¢ *Next owner:* <@%s>\n", rotation.CurrentOwner)
		msg += fmt.Sprintf("‚Ä¢ *Next period:* %s to %s\n", 
			rotation.LastRotationDate.Format("Mon, Jan 2 2006"), 
			rotation.NextRotationDate.Format("Mon, Jan 2 2006"))
		msg += fmt.Sprintf("‚Ä¢ *Start date:* %s\n\n", rotation.LastRotationDate.Format("Mon, Jan 2 2006"))
		msg += fmt.Sprintf("‚Ä¢ *Following owner:* <@%s>\n", nextOwner)
		msg += fmt.Sprintf("‚Ä¢ *Following period:* %s to %s", 
			nextOwnerFrom.Format("Mon, Jan 2 2006"), 
			nextOwnerTo.Format("Mon, Jan 2 2006"))
	} else {
		// Format the announcement message for current rotation (original logic)
		msg = fmt.Sprintf("üîÑ *Rotation Update: `%s`*\n\n", rotation.RotationLabel)
		msg += fmt.Sprintf("‚Ä¢ *Current owner:* <@%s>\n", rotation.CurrentOwner)
		msg += fmt.Sprintf("‚Ä¢ *Current period:* %s to %s\n", 
			rotation.LastRotationDate.Format("Mon, Jan 2 2006"), 
			rotation.NextRotationDate.Format("Mon, Jan 2 2006"))
		msg += fmt.Sprintf("‚Ä¢ *Handover:* %s\n\n", rotation.NextRotationDate.Format("Mon, Jan 2 2006"))
		msg += fmt.Sprintf("‚Ä¢ *Next owner:* <@%s>\n", nextOwner)
		msg += fmt.Sprintf("‚Ä¢ *Next period:* %s to %s", 
			nextOwnerFrom.Format("Mon, Jan 2 2006"), 
			nextOwnerTo.Format("Mon, Jan 2 2006"))
	}
	
	// Send to channel if configured
	var result error
	if rotation.SlackChannelID != "" {
		_, _, channelErr := n.slackClient.PostMessage(
			rotation.SlackChannelID,
			slack.MsgOptionText(msg, false),
		)

		if channelErr != nil {
			// Check for specific Slack channel errors
			if channelErr.Error() == "channel_not_found" || channelErr.Error() == "not_in_channel" {
				// Instead of returning an error, append the information to the message
				msg += fmt.Sprintf("\n\n‚ö†Ô∏è *Note:* Unable to post to the specified channel: %v. Please add the Slack app bot to the channel first before attempting to send notifications.", channelErr)
			} else {
				// Only append other errors to the multierror
				result = multierror.Append(result, channelErr)
			}
		}
	}
	
	// Direct message to relevant parties if requested
	if dmParticipants {
		var currentOwnerErr, nextOwnerErr error
		
		if isFutureRotation {
			// DM future owner
			_, _, currentOwnerErr = n.slackClient.PostMessage(
				rotation.CurrentOwner,
				slack.MsgOptionText(fmt.Sprintf("*Heads up:* You will be the first owner of rotation `%s` starting on %s.", 
					rotation.RotationLabel, 
					rotation.LastRotationDate.Format("Mon, Jan 2 2006")), 
				false),
			)
			
			// DM following owner
			_, _, nextOwnerErr = n.slackClient.PostMessage(
				nextOwner,
				slack.MsgOptionText(fmt.Sprintf("*Heads up:* You will become the owner of rotation `%s` on %s.", 
					rotation.RotationLabel, 
					rotation.NextRotationDate.Format("Mon, Jan 2 2006")), 
				false),
			)
		} else {
			// DM current owner (original logic)
			_, _, currentOwnerErr = n.slackClient.PostMessage(
				rotation.CurrentOwner,
				slack.MsgOptionText(fmt.Sprintf("*Reminder:* You are the current owner of rotation `%s` until %s.", 
					rotation.RotationLabel, 
					rotation.NextRotationDate.Format("Mon, Jan 2 2006")), 
				false),
			)
			
			// DM next owner (original logic)
			_, _, nextOwnerErr = n.slackClient.PostMessage(
				nextOwner,
				slack.MsgOptionText(fmt.Sprintf("*Heads up:* You will become the owner of rotation `%s` on %s.", 
					rotation.RotationLabel, 
					rotation.NextRotationDate.Format("Mon, Jan 2 2006")), 
				false),
			)
		}

		if currentOwnerErr != nil {
			result = multierror.Append(result, currentOwnerErr)
		}
		
		if nextOwnerErr != nil {
			result = multierror.Append(result, nextOwnerErr)
		}
	}
	
	return msg, result
}
