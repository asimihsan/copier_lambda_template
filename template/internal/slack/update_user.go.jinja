package slack

import (
	"context"
	"fmt"
	"strings"

	"{{ github_path }}/internal/repository"
	"github.com/rs/zerolog"
	"github.com/slack-go/slack"
)

// Minimum number of command arguments required for updating a user (user_id and at least one field)
const MinUpdateUserFields = 2

type UpdateUserCommand struct {
	Repo   repository.UserRepository
	Logger zerolog.Logger
}

func NewUpdateUserCommand(repo repository.UserRepository, logger zerolog.Logger) *UpdateUserCommand {
	return &UpdateUserCommand{Repo: repo, Logger: logger}
}

func (c *UpdateUserCommand) HandleCommand(ctx context.Context, cmd slack.SlashCommand, args string) (slack.Msg, error) {
	c.Logger.Info().Msg("Handling 'update' command")
	// Expected format: update <user_id> email:<new_email> name:<new_name>
	fields := strings.Fields(args)

	if len(fields) < MinUpdateUserFields {
		return slack.Msg{
			ResponseType: slack.ResponseTypeEphemeral,
			Text:         "Usage: /slash update <user_id> [email:<new_email>] [name:<new_name>]",
		}, nil
	}

	userID := fields[0]

	var email, name string

	for _, field := range fields[1:] {
		if strings.HasPrefix(field, "email:") {
			email = strings.TrimPrefix(field, "email:")
		} else if strings.HasPrefix(field, "name:") {
			name = strings.TrimPrefix(field, "name:")
		}
	}

	if email == "" && name == "" {
		return slack.Msg{
			ResponseType: slack.ResponseTypeEphemeral,
			Text:         "Please provide at least one field to update (email or name).",
		}, nil
	}

	update := repository.UserUpdate{}

	if email != "" {
		update.Email = &email
	}

	if name != "" {
		update.Name = &name
	}

	user, err := c.Repo.UpdateUser(ctx, userID, update)
	if err != nil {
		c.Logger.Error().Err(err).Msg("Failed to update user")

		return slack.Msg{
			ResponseType: slack.ResponseTypeEphemeral,
			Text:         "Failed to update user",
		}, err
	}

	if user == nil {
		return slack.Msg{
			ResponseType: slack.ResponseTypeEphemeral,
			Text:         "User not found.",
		}, nil
	}

	message := fmt.Sprintf("User updated: ID: %s, Name: %s, Email: %s", user.ID, user.Name, user.Email)

	return slack.Msg{
		ResponseType: slack.ResponseTypeInChannel,
		Text:         message,
	}, nil
}
