package slack

import (
	"context"
	"strings"

	"github.com/slack-go/slack"

	"{{ github_path }}/internal/repository"
)

// RotationCommand handles rotation-related commands (e.g. "show", "next")
type RotationCommand struct {
	repo repository.RotationRepository
}

func NewRotationCommand(repo repository.RotationRepository) *RotationCommand {
	return &RotationCommand{
		repo: repo,
	}
}

func (c *RotationCommand) HandleCommand(ctx context.Context, cmd slack.SlashCommand, args string) (slack.Msg, error) {
	args = strings.TrimSpace(args)
	switch strings.ToLower(args) {
	case "", "show":
		// For MVP, return a stubbed rotation status.
		return slack.Msg{
			ResponseType: slack.ResponseTypeInChannel,
			Text:         "Rotation schedule: Current owner is @user1, next in line: @user2.",
		}, nil
	case "next":
		return slack.Msg{
			ResponseType: slack.ResponseTypeInChannel,
			Text:         "Next deployment owner is @user2.",
		}, nil
	default:
		return slack.Msg{
			ResponseType: slack.ResponseTypeEphemeral,
			Text:         "Invalid rotation command. Use `/rotation show` or `/rotation next`.",
		}, nil
	}
}
