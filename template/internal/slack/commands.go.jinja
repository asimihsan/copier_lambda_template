package slack

import (
	"context"
	"fmt"
	"github.com/rs/zerolog"
	"github.com/slack-go/slack"
)

// SlackCommandHandler defines an interface for handling a Slack command.
type SlackCommandHandler interface {
	HandleCommand(ctx context.Context, cmd slack.SlashCommand) (slack.Msg, error)
}

// Registry holds mappings from command keywords to their handlers.
type Registry struct {
	handlers map[string]SlackCommandHandler
	logger   zerolog.Logger
}

// NewRegistry creates a new command registry.
func NewRegistry(logger zerolog.Logger) *Registry {
	return &Registry{handlers: make(map[string]SlackCommandHandler), logger: logger}
}

// Register adds a new handler for the given command keyword.
func (r *Registry) Register(cmd string, handler SlackCommandHandler) {
	r.handlers[cmd] = handler
}

// Dispatch parses the command text and finds the appropriate handler.
func (r *Registry) Dispatch(ctx context.Context, cmd slack.SlashCommand) (slack.Msg, error) {
	command := cmd.Command[1:]

	handler, ok := r.handlers[command]

	if !ok {
		r.logger.Warn().Msgf("Unknown command: %s", cmd.Command)

		return slack.Msg{
			ResponseType: slack.ResponseTypeEphemeral,
			Text:         fmt.Sprintf("Unknown command '%s'. Use one of: rotation, override", cmd.Command),
		}, nil
	}

	r.logger.Info().Msgf("Dispatching command '%s'", cmd.Command)

	return handler.HandleCommand(ctx, cmd)
}
