package commands

import (
	"context"
	"fmt"

	"github.com/slack-go/slack"
	"{{ github_path }}/internal/repository"
)

// ReorderCommand handles the "reorder" subcommand
type ReorderCommand struct {
	repo repository.RotationRepository
}

func NewReorderCommand(repo repository.RotationRepository) *ReorderCommand {
	return &ReorderCommand{
		repo: repo,
	}
}

func (c *ReorderCommand) Name() string {
	return "reorder"
}

func (c *ReorderCommand) HelpBlocks() []slack.Block {
	return []slack.Block{
		slack.NewHeaderBlock(
			slack.NewTextBlockObject("plain_text", "Reorder Rotation Help", false, false),
		),
		slack.NewSectionBlock(
			slack.NewTextBlockObject("mrkdwn", "*Usage:* `/rotation reorder <label> <@user...>`", false, false),
			nil,
			nil,
		),
		slack.NewSectionBlock(
			slack.NewTextBlockObject("mrkdwn", "Reorders the entire rotation. You must provide all current members in the new order.\nExample: `/rotation reorder devRotation <@U12345678> <@U87654321>`", false, false),
			nil,
			nil,
		),
	}
}

func (c *ReorderCommand) Execute(ctx context.Context, cmd slack.SlashCommand, args []string) (slack.Msg, error) {
	if len(args) < 2 {
		return slack.Msg{
			ResponseType: slack.ResponseTypeEphemeral,
			Blocks:       slack.Blocks{BlockSet: c.HelpBlocks()},
		}, nil
	}
	
	return c.reorderRotation(ctx, cmd.TeamID, args[0], args[1:])
}

// reorderRotation reorders the rotation members based on the provided user list.
func (c *ReorderCommand) reorderRotation(ctx context.Context, teamID, label string, users []string) (slack.Msg, error) {
	r, err := c.repo.GetRotation(ctx, teamID, label)

	if err != nil || r == nil {
		return slack.Msg{}, fmt.Errorf("Rotation `%s` not found", label)
	}

	if len(users) != len(r.RotationOrder) {
		return slack.Msg{}, fmt.Errorf("provided user list must include all current rotation members")
	}

	for _, user := range users {
		if !contains(r.RotationOrder, user) {
			return slack.Msg{}, fmt.Errorf("user %s is not in the current rotation", user)
		}
	}

	r.RotationOrder = users
	// Ensure current owner remains valid.
	if !contains(users, r.CurrentOwner) {
		r.CurrentOwner = users[0]
	}

	if err := c.repo.UpsertRotation(ctx, *r); err != nil {
		return slack.Msg{}, err
	}

	return slack.Msg{ResponseType: slack.ResponseTypeInChannel,
		Text: fmt.Sprintf("Rotation `%s` reordered.", label)}, nil
}
