package commands

import (
	"context"
	"fmt"
	"time"

	"github.com/slack-go/slack"
	"{{ github_path }}/internal/repository"
	"{{ github_path }}/internal/rotationutil"
)

// CreateCommand implements the RotationSubCommand interface.
//
// To add a new command:
//   1. Create a new file in this directory.
//   2. Define a type that implements:
//         Name() string
//         HelpBlocks() []slack.Block
//         Execute(ctx context.Context, cmd slack.SlashCommand, args []string) (slack.Msg, error)
//   3. Register your command in RotationCommand.registerSubCommands.
type CreateCommand struct {
	repo        repository.RotationRepository
	slackClient *slack.Client
}

// NewCreateCommand creates a new CreateCommand.
func NewCreateCommand(repo repository.RotationRepository, slackClient *slack.Client) *CreateCommand {
	return &CreateCommand{
		repo:        repo,
		slackClient: slackClient,
	}
}

func (c *CreateCommand) Name() string {
	return "create"
}

func (c *CreateCommand) HelpBlocks() []slack.Block {
	return []slack.Block{
		slack.NewHeaderBlock(
			slack.NewTextBlockObject("plain_text", "Create Rotation Help", false, false),
		),
		slack.NewSectionBlock(
			slack.NewTextBlockObject("mrkdwn", "*Usage:* `/rotation create <label> <frequency> [@user...]`", false, false),
			nil, nil,
		),
		slack.NewSectionBlock(
			slack.NewTextBlockObject("mrkdwn", "Valid frequencies: daily, weekly, biweekly, monthly.\nExample: `/rotation create devRotation weekly <@U12345678>`", false, false),
			nil, nil,
		),
	}
}

func (c *CreateCommand) Execute(ctx context.Context, cmd slack.SlashCommand, args []string) (slack.Msg, error) {
	if len(args) < 2 {
		return slack.Msg{
			ResponseType: slack.ResponseTypeEphemeral,
			Blocks:       slack.Blocks{BlockSet: c.HelpBlocks()},
		}, nil
	}
	
	label := args[0]
	frequency := args[1]
	var users []string
	if len(args) > 2 {
		users = args[2:]
	}
	
	return c.createRotation(ctx, cmd, label, frequency, users)
}

func (c *CreateCommand) createRotation(ctx context.Context, cmd slack.SlashCommand, label, frequency string, users []string) (slack.Msg, error) {
	user, err := c.slackClient.GetUserInfo(cmd.UserID)

	if err != nil {
		return slack.Msg{}, err
	}

	if len(users) == 0 {
		users = []string{cmd.UserID}
	}

	rotation := repository.Rotation{
		CreatorTeamID:    cmd.TeamID,
		RotationLabel:    label,
		Frequency:        frequency,
		CurrentOwner:     users[0],
		RotationOrder:    users,
		LastRotationDate: time.Now(),
		NextRotationDate: rotationutil.CalculateNextRotationDate(time.Now(), frequency),
		CreatorUserID:    cmd.UserID,
		CreatorUserName:  user.Name,
	}

	if err := c.repo.UpsertRotation(ctx, rotation); err != nil {
		return slack.Msg{}, err
	}

	return slack.Msg{ResponseType: slack.ResponseTypeInChannel, Text: fmt.Sprintf("Rotation `%s` created.", label)}, nil
}
