package commands

import (
	"fmt"
	"regexp"
	"time"

	"{{ github_path }}/internal/repository"
)

// Helper functions used by multiple commands

// contains checks if a string slice contains a specific string
func contains(slice []string, s string) bool {
	for _, item := range slice {
		if item == s {
			return true
		}
	}

	return false
}

// remove removes a string from a slice
func remove(slice []string, s string) []string {
	filtered := []string{}

	for _, item := range slice {
		if item != s {
			filtered = append(filtered, item)
		}
	}

	return filtered
}

// calculateNextRotationDate determines the next rotation date based on frequency
func calculateNextRotationDate(lastDate time.Time, frequency string) time.Time {
	switch frequency {
	case "daily":
		return lastDate.AddDate(0, 0, 1)

	case "weekly":
		return lastDate.AddDate(0, 0, 7)

	case "biweekly":
		return lastDate.AddDate(0, 0, 14)

	case "monthly":
		return lastDate.AddDate(0, 1, 0)

	default:
		return lastDate.AddDate(0, 0, 7)
	}
}

// nextOwner determines who will be the next owner in the rotation
func nextOwner(r *repository.Rotation) string {
	for i, owner := range r.RotationOrder {
		if owner == r.CurrentOwner {
			return r.RotationOrder[(i+1)%len(r.RotationOrder)]
		}
	}

	return r.RotationOrder[0]
}

// extractUserIDFromMention parses the Slack mention format and returns the user ID.
func extractUserIDFromMention(mention string) (string, error) {
	// Regular expression to match both <@USER_ID|username> and <@USER_ID> patterns
	re := regexp.MustCompile(`<@([UW][A-Z0-9]{8,})(?:\|[^>]+)?>`)

	match := re.FindStringSubmatch(mention)

	if len(match) != 2 {
		return "", fmt.Errorf("invalid mention format: %s", mention)
	}

	return match[1], nil
}

// extractChannelID extracts a channel ID from a Slack channel mention
func extractChannelID(mention string) (string, error) {
	// Accepts a typical Slack channel mention format: <#CHANNELID|channel_name>
	re := regexp.MustCompile(`<#(C[A-Z0-9]+)(?:\|[^>]+)?>`)
	match := re.FindStringSubmatch(mention)
	if len(match) != 2 {
		return "", fmt.Errorf("invalid channel mention format: %s", mention)
	}
	return match[1], nil
}
