package slack

import (
	"context"
	"fmt"
	"strings"

	"github.com/rs/zerolog"
	"github.com/slack-go/slack"
	"{{ github_path }}/internal/repository"
)

type DeleteUserCommand struct {
	Repo   repository.UserRepository
	Logger zerolog.Logger
}

func NewDeleteUserCommand(repo repository.UserRepository, logger zerolog.Logger) *DeleteUserCommand {
	return &DeleteUserCommand{Repo: repo, Logger: logger}
}

func (c *DeleteUserCommand) HandleCommand(ctx context.Context, cmd slack.SlashCommand, args string) (slack.Msg, error) {
	c.Logger.Info().Msg("Handling 'delete' command")
	id := strings.TrimSpace(args)
	if id == "" {
		return slack.Msg{
			ResponseType: slack.ResponseTypeEphemeral,
			Text:         "Usage: /slash delete <user_id>",
		}, nil
	}
	err := c.Repo.DeleteUser(ctx, id)
	if err != nil {
		c.Logger.Error().Err(err).Msg("Failed to delete user")
		return slack.Msg{
			ResponseType: slack.ResponseTypeEphemeral,
			Text:         "Failed to delete user",
		}, err
	}
	message := fmt.Sprintf("User with ID %s deleted.", id)
	return slack.Msg{
		ResponseType: slack.ResponseTypeInChannel,
		Text:         message,
	}, nil
}
