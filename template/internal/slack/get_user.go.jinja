package slack

import (
	"context"
	"fmt"
	"strings"

	"github.com/rs/zerolog"
	"github.com/slack-go/slack"
	"{{ github_path }}/internal/repository"
)

type GetUserCommand struct {
	Repo   repository.UserRepository
	Logger zerolog.Logger
}

func NewGetUserCommand(repo repository.UserRepository, logger zerolog.Logger) *GetUserCommand {
	return &GetUserCommand{Repo: repo, Logger: logger}
}

func (c *GetUserCommand) HandleCommand(ctx context.Context, cmd slack.SlashCommand, args string) (slack.Msg, error) {
	c.Logger.Info().Msg("Handling 'get' command")
	id := strings.TrimSpace(args)
	if id == "" {
		return slack.Msg{
			ResponseType: slack.ResponseTypeEphemeral,
			Text:         "Usage: /slash get <user_id>",
		}, nil
	}
	user, err := c.Repo.GetUser(ctx, id)
	if err != nil {
		c.Logger.Error().Err(err).Msg("Failed to get user")
		return slack.Msg{
			ResponseType: slack.ResponseTypeEphemeral,
			Text:         "Failed to get user",
		}, err
	}
	if user == nil {
		return slack.Msg{
			ResponseType: slack.ResponseTypeInChannel,
			Text:         "User not found.",
		}, nil
	}
	message := fmt.Sprintf("User found: ID: %s, Name: %s, Email: %s", user.ID, user.Name, user.Email)
	return slack.Msg{
		ResponseType: slack.ResponseTypeInChannel,
		Text:         message,
	}, nil
}
