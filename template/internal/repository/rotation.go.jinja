package repository

import (
	"context"
	"time"
)

// Rotation represents a deployment rotation.
// Note that the composite key is: creator_team_id (partition key) and rotation_label (sort key).
type Rotation struct {
	CreatorTeamID    string    `json:"creator_team_id"`    // Partition key: Slack team ID
	RotationLabel    string    `json:"rotation_label"`     // Sort key: userâ€‘friendly name (unique per team)
	Frequency        string    `json:"frequency"`
	CurrentOwner     string    `json:"current_owner"`
	RotationOrder    []string  `json:"rotation_order"`
	LastRotationDate time.Time `json:"last_rotation_date"`
	NextRotationDate time.Time `json:"next_rotation_date"`
	CreatorUserID    string    `json:"creator_user_id"`
	CreatorUserName  string    `json:"creator_user_name"`
}

// RotationRepository defines operations on a rotation.
type RotationRepository interface {
	// GetRotation retrieves a rotation by its team ID and label.
	GetRotation(ctx context.Context, teamID, rotationLabel string) (*Rotation, error)
	// AdvanceRotation moves the rotation forward for the given team and label.
	AdvanceRotation(ctx context.Context, teamID, rotationLabel string) error
	// CreateRotation creates a new rotation.
	CreateRotation(ctx context.Context, rotation Rotation) error
}
