package repository

import (
	"context"
	"time"
	
	"github.com/aws/aws-sdk-go-v2/service/dynamodb/types"
)

// Rotation represents a deployment rotation.
// Note that the composite key is: creator_team_id (partition key) and rotation_label (sort key).
type Rotation struct {
	CreatorTeamID    string    `dynamodbav:"creator_team_id" json:"creator_team_id"` // Partition key: Slack team ID
	RotationLabel    string    `dynamodbav:"rotation_label" json:"rotation_label"`   // Sort key: userâ€‘friendly name (unique per team)
	Frequency        string    `dynamodbav:"frequency" json:"frequency"`
	CurrentOwner     string    `dynamodbav:"current_owner" json:"current_owner"`
	RotationOrder    []string  `dynamodbav:"rotation_order" json:"rotation_order"`
	LastRotationDate time.Time `dynamodbav:"last_rotation_date" json:"last_rotation_date"`
	NextRotationDate time.Time `dynamodbav:"next_rotation_date" json:"next_rotation_date"`
	CreatorUserID    string    `dynamodbav:"creator_user_id" json:"creator_user_id"`
	CreatorUserName  string    `dynamodbav:"creator_user_name" json:"creator_user_name"`
    SlackChannelID   string    `dynamodbav:"slack_channel_id,omitempty" json:"slack_channel_id,omitempty"`
	// Version for optimistic concurrency.
	Version int `dynamodbav:"version" json:"version"`
}

// RotationRepository defines operations on a rotation.
type RotationRepository interface {
	// GetRotation retrieves a rotation by its team ID and label.
	GetRotation(ctx context.Context, teamID, rotationLabel string) (*Rotation, error)
	// AdvanceRotation moves the rotation forward for the given team and label.
	AdvanceRotation(ctx context.Context, teamID, rotationLabel string) error
	// UpsertRotation creates or updates a rotation.
	UpsertRotation(ctx context.Context, rotation Rotation) error
	// ListRotations lists all rotations for a given team with pagination support.
	ListRotations(ctx context.Context, teamID string, limit int32, lastEvaluatedKey map[string]types.AttributeValue) ([]Rotation, map[string]types.AttributeValue, error)
	// DeleteRotation removes a rotation by its team ID and label.
	DeleteRotation(ctx context.Context, teamID, rotationLabel string) error
}
