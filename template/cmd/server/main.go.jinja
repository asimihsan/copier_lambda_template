package main

import (
	"fmt"
	"os"

	"{{ github_path }}/internal/config"
	"{{ github_path }}/internal/handler"
	"{{ github_path }}/internal/repository"
	"{{ github_path }}/internal/server"
	"{{ github_path }}/pkg/logger"
	"github.com/rs/zerolog/log"
	"github.com/urfave/cli/v2"
)

func main() {
	app := &cli.App{
		Name:  "{{ project_name }}",
		Usage: "A user management service with DynamoDB backend and Slack integration2",
		Flags: []cli.Flag{
			&cli.BoolFlag{
				Name:    "local",
				Aliases: []string{"l"},
				Usage:   "Run in local development mode with DynamoDB local",
				Value:   false,
				EnvVars: []string{"APP_LOCAL_MODE"},
			},
			&cli.StringFlag{
				Name:    "region",
				Usage:   "AWS region",
				Value:   "us-east-1",
				EnvVars: []string{"AWS_REGION"},
			},
			&cli.StringFlag{
				Name:    "dynamodb-endpoint",
				Usage:   "DynamoDB endpoint URL (empty for AWS service endpoint)",
				Value:   "http://localhost:8000",
				EnvVars: []string{"DYNAMODB_ENDPOINT"},
			},
			&cli.StringFlag{
				Name:    "dynamodb-table",
				Usage:   "DynamoDB table name",
				Value:   "users",
				EnvVars: []string{"DYNAMODB_TABLE_NAME"},
			},
			&cli.IntFlag{
				Name:    "port",
				Usage:   "HTTP server port",
				Value:   8080, //nolint:mnd
				EnvVars: []string{"PORT"},
			},
			&cli.StringFlag{
				Name:    "base-path",
				Usage:   "Base path for API endpoints",
				Value:   "/api/v1",
				EnvVars: []string{"BASE_PATH"},
			},
			&cli.StringFlag{
				Name:    "log-level",
				Usage:   "Log level (debug, info, warn, error)",
				Value:   "info",
				EnvVars: []string{"LOG_LEVEL"},
			},
			&cli.StringFlag{
				Name:    "slack-signing-secret",
				Usage:   "Slack signing secret for request verification",
				EnvVars: []string{"SLACK_SIGNING_SECRET"},
			},
			&cli.StringFlag{
				Name:    "slack-bot-token",
				Usage:   "Slack bot token for API calls",
				EnvVars: []string{"SLACK_BOT_TOKEN"},
			},
		},
		Action: run,
	}

	err := app.Run(os.Args)
	if err != nil {
		fmt.Fprintf(os.Stderr, "Error: %v\n", err)
		os.Exit(1)
	}
}

func run(c *cli.Context) error {
	// Load config and initialize logger.
	cfg, err := config.LoadConfig()

	if err != nil {
		return fmt.Errorf("failed to load config: %w", err)
	}

	logger.Setup(cfg.LogLevel)

	// Create DynamoDB client and repositories.
	dynamoClient, err := repository.NewDynamoDBClient(
		cfg.Database.DynamoDBEndpoint,
		cfg.Region,
		cfg.Database.IsLocal,
	)

	if err != nil {
		return fmt.Errorf("failed to create DynamoDB client: %w", err)
	}

	overrideRepo := repository.NewDynamoDBOverrideRepository(dynamoClient, cfg.Slack.OverrideTableName)
	rotationRepo := repository.NewDynamoDBRotationRepository(dynamoClient, cfg.Slack.RotationTableName)

	// Create your API server that implements the generated interface.
	// (You must provide an implementation of handler.ServerInterface for your API endpoints.)
	apiHandler := handler.NewSlackHandler(overrideRepo, rotationRepo, cfg.Slack, log.Logger)
	srv := server.New(cfg, apiHandler)

	// Start the Echo server.
	return srv.Start()
}
