package main

import (
	"fmt"
	"net/http"
	"os"
	"time"

	"{{ github_path }}/internal/config"
	"{{ github_path }}/internal/handler"
	"{{ github_path }}/internal/repository"
	"{{ github_path }}/pkg/logger"
	"{{ github_path }}/pkg/middleware"
	"github.com/rs/zerolog/log"
	"github.com/urfave/cli/v2"
)

func main() {
	app := &cli.App{
		Name:  "rotateorama",
		Usage: "A user management service with DynamoDB backend and Slack integration",
		Flags: []cli.Flag{
			&cli.BoolFlag{
				Name:    "local",
				Aliases: []string{"l"},
				Usage:   "Run in local development mode with DynamoDB local",
				Value:   false,
				EnvVars: []string{"APP_LOCAL_MODE"},
			},
			&cli.StringFlag{
				Name:    "dynamodb-endpoint",
				Usage:   "DynamoDB endpoint URL (empty for AWS service endpoint)",
				Value:   "http://localhost:8000",
				EnvVars: []string{"DYNAMODB_ENDPOINT"},
			},
			&cli.StringFlag{
				Name:    "dynamodb-region",
				Usage:   "AWS region for DynamoDB",
				Value:   "us-east-1",
				EnvVars: []string{"DYNAMODB_REGION"},
			},
			&cli.StringFlag{
				Name:    "dynamodb-table",
				Usage:   "DynamoDB table name",
				Value:   "users",
				EnvVars: []string{"DYNAMODB_TABLE_NAME"},
			},
			&cli.IntFlag{
				Name:    "port",
				Usage:   "HTTP server port",
				Value:   8080, //nolint:mnd
				EnvVars: []string{"PORT"},
			},
			&cli.StringFlag{
				Name:    "base-path",
				Usage:   "Base path for API endpoints",
				Value:   "/api/v1",
				EnvVars: []string{"BASE_PATH"},
			},
			&cli.StringFlag{
				Name:    "log-level",
				Usage:   "Log level (debug, info, warn, error)",
				Value:   "info",
				EnvVars: []string{"LOG_LEVEL"},
			},
			&cli.StringFlag{
				Name:    "slack-signing-secret",
				Usage:   "Slack signing secret for request verification",
				EnvVars: []string{"SLACK_SIGNING_SECRET"},
			},
			&cli.StringFlag{
				Name:    "slack-bot-token",
				Usage:   "Slack bot token for API calls",
				EnvVars: []string{"SLACK_BOT_TOKEN"},
			},
		},
		Action: run,
	}

	err := app.Run(os.Args)
	if err != nil {
		fmt.Fprintf(os.Stderr, "Error: %v\n", err)
		os.Exit(1)
	}
}

func run(c *cli.Context) error {
	// Create config from CLI flags
	cfg := &config.Config{
		Server: config.ServerConfig{
			Port:     c.Int("port"),
			BasePath: c.String("base-path"),
		},
		Database: config.DatabaseConfig{
			DynamoDBEndpoint:  c.String("dynamodb-endpoint"),
			DynamoDBRegion:    c.String("dynamodb-region"),
			DynamoDBTableName: c.String("dynamodb-table"),
			IsLocal:           c.Bool("local"),
		},
		LogLevel: c.String("log-level"),
		Slack: config.SlackConfig{
			SigningSecret: c.String("slack-signing-secret"),
			BotToken:      c.String("slack-bot-token"),
		},
	}

	// Clear endpoint if not in local mode
	if !cfg.Database.IsLocal {
		cfg.Database.DynamoDBEndpoint = ""
	}

	// Setup logger
	logger.Setup(cfg.LogLevel)
	log.Info().
		Bool("localMode", cfg.Database.IsLocal).
		Str("region", cfg.Database.DynamoDBRegion).
		Str("endpoint", cfg.Database.DynamoDBEndpoint).
		Int("port", cfg.Server.Port).
		Msg("Starting application")

	// Create a DynamoDB client (no more UserRepository)
	dynamoClient, err := repository.NewDynamoDBClient(
		cfg.Database.DynamoDBEndpoint,
		cfg.Database.DynamoDBRegion,
		cfg.Database.IsLocal,
	)
	if err != nil {
		return fmt.Errorf("failed to create DynamoDB client: %w", err)
	}

	// Build our specific repositories
	overrideRepo := repository.NewDynamoDBOverrideRepository(dynamoClient, cfg.Slack.OverrideTableName)
	rotationRepo := repository.NewDynamoDBRotationRepository(dynamoClient, cfg.Slack.RotationTableName)

	// Create the Slack handler with the new repositories and Slack config
	slackHandler := handler.NewSlackHandler(overrideRepo, rotationRepo, cfg.Slack)

	// Inject the Slack signing secret and global logger into the middleware
	verificationMw := middleware.NewSlackVerificationMiddleware(cfg.Slack.SigningSecret, log.Logger)
	http.Handle("/slash", middleware.LoggingMiddleware(verificationMw(slackHandler)))

	addr := fmt.Sprintf(":%d", cfg.Server.Port)
	log.Info().Msgf("Slack bot server listening on %s", addr)

	server := &http.Server{
		Addr:         addr,
		Handler:      nil, // Use default router
		ReadTimeout:  15 * time.Second, //nolint:mnd
		WriteTimeout: 15 * time.Second, //nolint:mnd
		IdleTimeout:  60 * time.Second, //nolint:mnd
	}
	return server.ListenAndServe()
}
