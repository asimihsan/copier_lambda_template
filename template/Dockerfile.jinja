# Dockerfile for AWS Lambda, referencing the {{ project_name }} build

FROM public.ecr.aws/amazonlinux/amazonlinux:2023 AS build

RUN dnf update -y && \
    dnf groupinstall -y "Development Tools" && \
    dnf install -y \
        gcc g++ tar curl-minimal git gnupg

# Install mise with proper caching and PATH setup
ENV MISE_CACHE_DIR=/var/cache/mise
ENV MISE_DATA_DIR=/var/lib/mise
ENV MISE_CONFIG_DIR=/etc/mise

# Copy mise.toml first for better caching
COPY mise.toml /app/mise.toml

# Install mise and set up environment
RUN --mount=type=cache,target=/var/cache/mise \
    curl https://mise.jdx.dev/install.sh | sh && \
    echo 'eval "$(/root/.local/bin/mise activate bash)"' >> ~/.bashrc && \
    . ~/.bashrc && \
    cd /app && \
    mise trust && \
    mise use -g 'python@prefix:3.12' && \
    mise x python -- pip install -U pip && \
    mise x python -- pip install --user pipx && \
    mise install

ARG TARGETPLATFORM

# Set up Go environment
ENV GOPATH=/go
ENV PATH="/go/bin:${PATH}"

WORKDIR /app

COPY go.mod go.sum ./

RUN --mount=type=cache,target=/go/pkg/mod \
    --mount=type=cache,target=/root/.cache/go-build \
    . ~/.bashrc && \
    go mod download

# Copy the rest of our application
COPY . .

# Build the application
RUN --mount=type=cache,target=/go/pkg/mod \
    --mount=type=cache,target=/root/.cache/go-build \
    . ~/.bashrc && \
    go build -o /tmp/bootstrap -tags lambda.norpc -ldflags="-s -w" ./cmd/server

FROM public.ecr.aws/lambda/provided:al2023 as final

ADD https://lambda-insights-extension-arm64.s3-ap-northeast-1.amazonaws.com/amazon_linux/lambda-insights-extension-arm64.rpm /tmp/lambda-insights-extension-arm64.rpm

RUN dnf update -y && \
    dnf install -y \
    ca-certificates && \
    # Create a non-root user manually
    echo "appuser:x:10001:10001::/home/appuser:/sbin/nologin" >> /etc/passwd && \
    echo "appuser:x:10001:" >> /etc/group && \
    mkdir -p /home/appuser && \
    # Install the Lambda Insights extension
    rpm -U /tmp/lambda-insights-extension-arm64.rpm && \
    rm -f /tmp/lambda-insights-extension-arm64.rpm

COPY --from=public.ecr.aws/awsguru/aws-lambda-adapter:0.9.0 /lambda-adapter /opt/extensions/lambda-adapter
COPY --from=build --chown=appuser:appuser /tmp/bootstrap /var/runtime/bootstrap

ENV PORT=7001
EXPOSE 7001

# Switch to the non-root user
USER 10001

WORKDIR /var/task
CMD ["bootstrap"]
